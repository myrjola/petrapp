// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: investigationtargets.sql

package db

import (
	"context"
)

const getInvestigationTarget = `-- name: GetInvestigationTarget :one
SELECT id, name, short_name, type, image_path, case_id
FROM investigation_targets
WHERE id = ?1
`

func (q *Queries) GetInvestigationTarget(ctx context.Context, investigationtargetid string) (InvestigationTarget, error) {
	row := q.db.QueryRowContext(ctx, getInvestigationTarget, investigationtargetid)
	var i InvestigationTarget
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ShortName,
		&i.Type,
		&i.ImagePath,
		&i.CaseID,
	)
	return i, err
}

const listInvestigationTargets = `-- name: ListInvestigationTargets :many
SELECT id, name, short_name, type, image_path, case_id
FROM investigation_targets
WHERE case_id = ?1 AND type = ?2
`

type ListInvestigationTargetsParams struct {
	CaseID string
	Type   string
}

func (q *Queries) ListInvestigationTargets(ctx context.Context, arg ListInvestigationTargetsParams) ([]InvestigationTarget, error) {
	rows, err := q.db.QueryContext(ctx, listInvestigationTargets, arg.CaseID, arg.Type)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InvestigationTarget
	for rows.Next() {
		var i InvestigationTarget
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ShortName,
			&i.Type,
			&i.ImagePath,
			&i.CaseID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
