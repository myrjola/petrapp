{{- /*gotype:github.com/myrjola/sheerluck/cmd/web.baseData*/ -}}
{{ define "base" }}
    <!doctype html>
    <html lang="en" class="h-full bg-gray-900 text-white">
    <head>
        <meta charset="utf-8"/>
        <meta http-equiv="x-ua-compatible" content="ie=edge"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <meta name="robots" content="noindex,nofollow"/>
        <title>Sheerluck</title>
        <meta name="description"
              content="AI-powered murder mysteries. Question suspects and investigate crime scenes to solve the case. Your first case is “The Murders in the Rue Morgue” by Edgar Allan Poe.">
        <link rel="stylesheet" href="/main.css"/>
        <link rel="icon" href="/logo.svg">
        <link rel="mask-icon" href="/logo.svg" color="#f1febe">
        <link rel="apple-touch-icon" href="https://myrjola.twic.pics/sheerluck/apple-touch-icon.png">
        <link rel="manifest" href="manifest.json">
        <meta name="theme-color" content="#111827">
        <script nonce="123" defer src="/htmx-1.9.9.js"></script>
        <script nonce="123" defer src="/sse-1.9.9.js"></script>
        <script nonce="123" defer src="/@alpinejs/focus-3.13.3.js"></script>
        <script nonce="123" defer src="/alpinejs-3.13.3.js"></script>
        <script nonce="123" async defer src="https://myrjola.twic.pics/?v1&path=sheerluck"></script>
        <meta name="htmx-config"
              content='{"selfRequestsOnly":"true", "historyCacheSize": 0, "allowEval": false, "globalViewTransitions": true}'>

        <style>
            my-counter:defined input {
                display: none;
            }
        </style>

        <script type="module">
            window.customElements.define("my-counter", class extends HTMLElement {
                connectedCallback() {
                    const tmpl = this.querySelector("template");
                    tmpl.replaceWith(tmpl.content);

                    const btn = this.querySelector("button");
                    const output = this.querySelector("output");
                    const input = this.querySelector("input");

                    let value = parseInt(output.innerText);
                    btn.addEventListener("click", () => {
                        value++;
                        output.innerText = value;
                        input.value = value;
                    })
                }
            })
        </script>
    </head>
    <body class="h-full" hx-boost="true">
    {{ block "body" . }}
        {{ if isAuthenticated .Ctx }}
        <dialog id="mobile-menu" class="animate-fade-out open:animate-fade-in">
            <div>
                Test
            </div>
            <button type="button" id="close-mobile-menu">Close</button>
        </dialog>
        <button id="open-mobile-menu">Open menu</button>
        <script src="/mobilemenu.js"></script>
        <div x-data="{ menuOpen: false }">
            <!-- Off-canvas menu for mobile, show/hide based on off-canvas menu state. -->
            <div class="hidden relative isolate z-50 lg:hidden"
                 role="dialog" aria-modal="true" x-trap="menuOpen" x-show="menuOpen" x-cloak
            >
                <div class="fixed inset-0 bg-gray-900/80" x-show="menuOpen"
                     x-transition:enter="transition-opacity ease-linear duration-300"
                     x-transition:enter-start="opacity-0"
                     x-transition:enter-end="opacity-100"
                     x-transition:leave="transition-opacity ease-linear duration-300"
                     x-transition:leave-start="opacity-100"
                     x-transition:leave-end="opacity-0"
                ></div>
                <div class="fixed inset-0 flex w-full">
                    <div class="relative flex w-full max-w-xs flex-1"
                         x-show="menuOpen"
                         x-transition:enter="transition ease-in-out duration-300 transform motion-reduce:duration-0"
                         x-transition:enter-start="-translate-x-full"
                         x-transition:enter-end="translate-x-0"
                         x-transition:leave="transition ease-in-out duration-300 transform motion-reduce:duration-0"
                         x-transition:leave-start="translate-x-0"
                         x-transition:leave-end="-translate-x-full"
                    >
                        {{ .Nav }}

                    </div>

                    <!-- Close button -->
                    <button @click="menuOpen = false"
                            class="group focus-visible:ring-0 flex-1 flex justify-start"
                            x-show="menuOpen"
                            x-transition:enter="transition-opacity ease-linear duration-300"
                            x-transition:enter-start="opacity-0"
                            x-transition:enter-end="opacity-100"
                            x-transition:leave="transition-opacity ease-linear duration-300"
                            x-transition:leave-start="opacity-100"
                            x-transition:leave-end="opacity-0"
                    >
                        <div class="p-2.5">
                            <span class="sr-only">Close menu</span>
                            <svg class="h-6 w-6 rounded-md text-white group-focus-visible:ring group-focus-visible:ring-white"
                                 fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
                                 aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round"
                                      d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </div>
                    </button>
                </div>
            </div>

            <!-- Static sidebar for desktop -->
            <div class="hidden lg:fixed lg:inset-y-0 lg:z-50 lg:flex lg:w-72 lg:flex-col">
                {{ .Nav }}
            </div>
            <div class="sticky top-0 z-40 flex items-center gap-x-6 bg-gray-900 px-4 py-4 shadow-sm sm:px-6 lg:hidden">
                <button @click="menuOpen = true" class="text-gray-400 -m-2.5 p-2.5 lg:hidden">
                    <span class="sr-only">Open sidebar</span>
                    <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
                         aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round"
                              d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path>
                    </svg>
                </button>
                <div class="flex-1 text-sm font-semibold leading-6 text-white">Dashboard</div>
            </div>

            <main class="py-10 lg:pl-72">
                <div class="px-4 sm:px-6 lg:px-8">
                    {{ .Slot }}
                </div>
            </main>
        </div>
        {{ else }}
        <main class="py-10">
            <div class="px-4 sm:px-6 lg:px-8">
                {{ .Slot }}
            </div>
        </main>
        {{ end }}
    {{ end }}
    </body>
    </html>
{{ end }}
