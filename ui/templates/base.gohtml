{{- /*gotype: github.com/myrjola/petrapp/cmd/web.BaseTemplateData*/ -}}
{{ define "base" }}
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="utf-8"/>
        <meta http-equiv="x-ua-compatible" content="ie=edge"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <meta name="robots" content="noindex,nofollow"/>
        <title>Petrapp</title>
        <meta name="description" content="Personal trainer in your pocket."/>
        <link rel="stylesheet" {{ nonce }} href="/main.css"/>
        <link rel="icon" href="/logo.svg"/>
        <link rel="mask-icon" href="/logo.svg" color="#000"/>
        <link rel="manifest" href="/manifest.json"/>
        <meta name="theme-color" content="#000"/>
        <script type="importmap" {{ nonce }}>
            {
              "imports": {
                "webauthn": "/webauthn.js"
              }
            }
        </script>
    </head>
    <body>
    <script {{ nonce }}>
      /**
       * Convenience function to get the parent element of the current script tag.
       * Inspired by https://github.com/gnat/surreal.
       * @returns {HTMLElement}
       */
      function me() {
        return document.currentScript.parentElement
      }

      /**
       * View transition handler for sliding animations for sliding left when we are going deeper in URL hierarchy and
       * sliding right when we are going shallower.
       */
      window.addEventListener('pagereveal', async (e) => {
        if (!e.viewTransition) {
          return
        }

        // This has been set in the 'navigate' event listener below.
        if (window.sessionStorage.getItem("hasUAVisualTransition")) {
          window.sessionStorage.removeItem("hasUAVisualTransition")
          e.viewTransition.skipTransition()
        }

        const fromUrl = navigation.activation.from.url
        const entryUrl = navigation.activation.entry.url
        depthDifference = fromUrl.split('/').length - entryUrl.split('/').length
        if (depthDifference === 0) {
          e.viewTransition.skipTransition()
        }
        document.documentElement.dataset.direction = depthDifference > 0 ? 'backward' : 'forward'
        await e.viewTransition.finished
        delete document.documentElement.dataset.direction
      })

      navigation.addEventListener('navigate', (e) => {
        // The user agent already provided us with a visual transition, e.g., swipe gesture,
        // there is no need to do one ourselves.
        //
        // Follow https://github.com/whatwg/html/issues/10831 for updates on the standardization.
        if (e.hasUAVisualTransition) {
          window.sessionStorage.setItem("hasUAVisualTransition", "true")
        }
      })

      // Form submission detector
      document.addEventListener('submit', function (e) {
        const form = e.target;
        form.classList.add('submitting')
        const submitButton = form.querySelector("button[type=submit]")
        if (submitButton) {
          submitButton.disabled = true
        }
      })

      // Reset form states when page is loaded from browser cache (back button).
      window.addEventListener('pageshow', function(event) {
        // pageshow event fires when page is loaded, including from cache.
        // event.persisted is true when the page is loaded from the back/forward cache.
        if (event.persisted) {
          // This was a back/forward navigation from cache.
          document.querySelectorAll('form.submitting').forEach(form => {
            form.classList.remove('submitting');
            const submitButton = form.querySelector("button[type=submit]");
            if (submitButton) {
              submitButton.disabled = false;
            }
          });
        }
      });
    </script>
    {{ template "page" . }}
    </body>
    </html>
{{ end }}
