{{- /*gotype: github.com/myrjola/petrapp/cmd/web.BaseTemplateData*/ -}}
{{ define "base" }}
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="utf-8"/>
        <meta http-equiv="x-ua-compatible" content="ie=edge"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <meta name="robots" content="noindex,nofollow"/>
        <title>Petra</title>
        <meta name="description" content="Personal trainer in your pocket."/>
        <link rel="stylesheet" {{ nonce }} href="/main.css"/>
        <link rel="icon" href="/logo.svg"/>
        <link rel="mask-icon" href="/logo.svg" color="#000"/>
        <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png"/>
        <link rel="manifest" href="/manifest.json"/>
        <meta name="theme-color" content="#000"/>
        <script type="importmap" {{ nonce }}>
            {
              "imports": {
                "webauthn": "/webauthn.js",
                "echarts": "/echarts.esm.min.js"
              }
            }
        </script>
    </head>
    <body>
    <script {{ nonce }}>
      /**
       * Convenience function to get the parent element of the current script tag.
       * Inspired by https://github.com/gnat/surreal.
       * @returns {HTMLElement}
       */
      function me() {
        return document.currentScript.parentElement
      }

      /**
       * View transition handler for sliding animations for sliding left when we are going deeper in URL hierarchy and
       * sliding right when we are going shallower.
       */
      window.addEventListener('pagereveal', async (e) => {
        if (!e.viewTransition) {
          return
        }

        // This has been set in the 'navigate' event listener below.
        if (window.sessionStorage.getItem("hasUAVisualTransition")) {
          window.sessionStorage.removeItem("hasUAVisualTransition")
          e.viewTransition.skipTransition()
        }

        const fromUrl = navigation.activation.from.url
        const entryUrl = navigation.activation.entry.url
        depthDifference = fromUrl.split('/').length - entryUrl.split('/').length
        if (depthDifference === 0) {
          e.viewTransition.skipTransition()
        }
        document.documentElement.dataset.direction = depthDifference > 0 ? 'backward' : 'forward'
        await e.viewTransition.finished
        delete document.documentElement.dataset.direction
      })

      navigation.addEventListener('navigate', (e) => {
        // The user agent already provided us with a visual transition, e.g., swipe gesture.
        // In this case, there is no need to do one ourselves.
        //
        // Follow https://github.com/whatwg/html/issues/10831 for updates on the standardization.
        if (e.hasUAVisualTransition) {
          window.sessionStorage.setItem("hasUAVisualTransition", "true")
        }

        // Very experimental navigation API testing to see if we can make browser history work like a stack navigator.
        // Check how backend is setting Content-Location header to understand better how they plumb together.
        if (e.formData) {
          e.intercept({
            async handler() {
              const body = new URLSearchParams(e.formData).toString()
              const result = await fetch(e.destination.url, {
                headers: {
                  "Content-Type": "application/x-www-form-urlencoded"
                },
                method: "POST",
                body,
              })
              const baseUrl = window.location.origin;
              const location = result.headers.get("Content-Location")
              const locationUrl = new URL(location, baseUrl)

              for (entry of navigation.entries()) {
                const entryUrl = new URL(entry.url)
                if (entryUrl.pathname === locationUrl.pathname) {
                  await navigation.traverseTo(entry.key).committed
                  navigation.reload()
                  return
                }
              }
              navigation.navigate(location, {history: "replace"})
            }
          })
        }
      })

      // Form submission detector
      document.addEventListener('submit', function (e) {
        const form = e.target;
        form.classList.add('submitting')
        const submitButton = form.querySelector("button[type=submit]")
        if (submitButton) {
          submitButton.disabled = true
        }
      })

      // Reset form states when the page is loaded from the browser cache (back button).
      window.addEventListener('pageshow', function (event) {
        // pageshow event fires when the page is loaded, including from cache.
        // event.persisted is true when the page is loaded from the back/forward cache.
        if (event.persisted) {
          // This was a back/forward navigation from cache.
          document.querySelectorAll('form.submitting').forEach(form => {
            form.classList.remove('submitting');
            const submitButton = form.querySelector("button[type=submit]");
            if (submitButton) {
              submitButton.disabled = false;
            }
          });
        }
      });

      function findMatchingHistoryEntry(targetUrl) {
        const entries = navigation.entries();
        const currentIndex = navigation.currentEntry.index;
        const targetURL = new URL(targetUrl);

        // Search backwards through history
        for (let i = currentIndex - 1; i >= 0; i--) {
          const entry = entries[i];
          const entryURL = new URL(entry.url);

          if (urlsMatch(entryURL, targetURL)) {
            return entry;
          }
        }

        return null;
      }

      function urlsMatch(url1, url2) {
        return url1.href === url2.href ||
          (url1.pathname === url2.pathname && url1.origin === url2.origin);
      }

      // Create a smart back button using the Navigation API.
      document.addEventListener("DOMContentLoaded", function () {
        // Find all anchors marked for back button enhancement.
        const backLinks = document.querySelectorAll('a[data-back-button]');

        backLinks.forEach(link => {
          const destinationUrl = link.href;

          // Only enhance if Navigation API is supported
          if (typeof navigation !== 'undefined') {
            link.addEventListener('click', async (e) => {
              const matchingEntry = findMatchingHistoryEntry(destinationUrl);

              if (matchingEntry) {
                e.preventDefault();
                await navigation.traverseTo(matchingEntry.key);
              }
            });
          }
        })
      })
    </script>
    <script {{ nonce }}>
      // Pull-to-refresh functionality for PWA mode.
      (function() {
        // Check if we're running as a PWA.
        const isPWA = () => {
          return window.matchMedia('(display-mode: standalone)').matches ||
                 window.navigator.standalone === true;
        };

        if (!isPWA()) {
          return;
        }

        let touchStartY = 0;
        let touchCurrentY = 0;
        let pullDistance = 0;
        let isRefreshing = false;
        let refreshThreshold = 80;
        let pullIndicator = null;

        // Create pull indicator element.
        const createPullIndicator = () => {
          const indicator = document.createElement('div');
          indicator.style.cssText = `
            position: fixed;
            top: -60px;
            left: 50%;
            transform: translateX(-50%);
            width: 40px;
            height: 40px;
            background: var(--gray-9);
            border-radius: var(--radius-round);
            display: flex;
            align-items: center;
            justify-content: center;
            transition: top 0.3s ease, transform 0.3s ease;
            z-index: 9999;
            color: var(--gray-0);
            font-size: var(--font-size-5);
          `;
          indicator.innerHTML = '↓';
          document.body.appendChild(indicator);
          return indicator;
        };

        // Initialize pull indicator on first pull.
        const getPullIndicator = () => {
          if (!pullIndicator) {
            pullIndicator = createPullIndicator();
          }
          return pullIndicator;
        };

        // Update indicator position and appearance.
        const updateIndicator = (distance) => {
          const indicator = getPullIndicator();
          const position = Math.min(distance - 60, 20);
          indicator.style.top = position + 'px';

          if (distance >= refreshThreshold) {
            indicator.innerHTML = '↻';
            indicator.style.transform = 'translateX(-50%) rotate(180deg)';
          } else {
            indicator.innerHTML = '↓';
            indicator.style.transform = 'translateX(-50%) rotate(0deg)';
          }
        };

        // Hide indicator.
        const hideIndicator = () => {
          if (pullIndicator) {
            pullIndicator.style.top = '-60px';
            pullIndicator.style.transform = 'translateX(-50%) rotate(0deg)';
          }
        };

        // Check if user is at the top of the page.
        const isAtTop = () => {
          return window.scrollY === 0;
        };

        // Handle touch start.
        document.addEventListener('touchstart', (e) => {
          if (isRefreshing || !isAtTop()) {
            return;
          }
          touchStartY = e.touches[0].clientY;
        }, { passive: true });

        // Handle touch move.
        document.addEventListener('touchmove', (e) => {
          if (isRefreshing || !isAtTop()) {
            return;
          }

          touchCurrentY = e.touches[0].clientY;
          pullDistance = touchCurrentY - touchStartY;

          // Only show indicator if pulling down.
          if (pullDistance > 0) {
            updateIndicator(pullDistance);
          }
        }, { passive: true });

        // Handle touch end.
        document.addEventListener('touchend', () => {
          if (isRefreshing || !isAtTop()) {
            return;
          }

          // Trigger refresh if pulled past threshold.
          if (pullDistance >= refreshThreshold) {
            isRefreshing = true;
            const indicator = getPullIndicator();
            indicator.innerHTML = '↻';
            indicator.style.animation = 'spin 1s linear infinite';

            // Add spin animation if not already defined.
            if (!document.querySelector('#pull-refresh-styles')) {
              const style = document.createElement('style');
              style.id = 'pull-refresh-styles';
              style.textContent = `
                @keyframes spin {
                  from { transform: translateX(-50%) rotate(0deg); }
                  to { transform: translateX(-50%) rotate(360deg); }
                }
              `;
              document.head.appendChild(style);
            }

            // Reload page after a short delay.
            setTimeout(() => {
              window.location.reload();
            }, 300);
          } else {
            hideIndicator();
          }

          // Reset values.
          touchStartY = 0;
          touchCurrentY = 0;
          pullDistance = 0;
        }, { passive: true });
      })();
    </script>
    {{ template "page" . }}
    </body>
    </html>
{{ end }}
