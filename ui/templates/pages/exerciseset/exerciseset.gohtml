{{- /*gotype: github.com/myrjola/petrapp/cmd/web.exerciseSetTemplateData*/ -}}

{{ define "page" }}
    <main class="page-container" role="main" aria-label="Exercise Set Workout">
        <style {{ nonce }}>
            @scope {
                :scope {
                    margin: var(--size-4);
                    display: flex;
                    flex-direction: column;
                    gap: var(--size-6);
                    max-width: 600px;
                    margin-left: auto;
                    margin-right: auto;
                    padding: var(--size-4);

                    @media (max-width: 768px) {
                        margin: var(--size-2);
                        padding: var(--size-2);
                    }
                }

                .exercise-header {
                    display: flex;
                    flex-direction: column;
                    gap: var(--size-3);
                    margin-bottom: var(--size-6);

                    .header-row {
                        display: flex;
                        align-items: center;
                        gap: var(--size-3);
                    }

                    .title-row {
                        justify-content: center;
                    }

                    .actions-row {
                        justify-content: flex-start;
                        align-items: center;

                        .timer {
                            margin-right: auto;
                        }

                        > div:last-child {
                            display: flex;
                            gap: var(--size-2);
                        }
                    }

                    .back-link {
                        color: var(--color-text-secondary);
                        text-decoration: none;
                        display: flex;
                        align-items: center;
                        gap: var(--size-2);
                        padding: var(--size-2);
                        border-radius: var(--radius-2);
                        transition: background-color 0.2s ease;

                        &:hover {
                            background: var(--color-surface);
                        }
                    }

                    .exercise-title {
                        font-size: var(--font-size-4);
                        font-weight: var(--font-weight-6);
                        color: var(--color-text-primary);
                    }

                    .timer {
                        background: var(--color-surface);
                        color: var(--color-text-primary);
                        padding: var(--size-2) var(--size-3);
                        border-radius: var(--radius-2);
                        font-size: var(--font-size-1);
                        font-weight: var(--font-weight-6);
                        font-family: var(--font-mono);
                        border: 1px solid var(--color-border);
                        min-width: 4rem;
                        text-align: center;
                    }

                    .action-button {
                        padding: var(--size-2) var(--size-3);
                        border-radius: var(--radius-2);
                        font-size: var(--font-size-0);
                        font-weight: var(--font-weight-6);
                        text-decoration: none;
                        transition: background-color 0.2s ease;

                        &.info-button {
                            background: var(--color-info-bg);
                            color: var(--color-info);

                            &:hover {
                                background: var(--sky-1);
                            }
                        }

                        &.swap-button {
                            background: var(--color-success-bg);
                            color: var(--color-success);

                            &:hover {
                                background: var(--lime-1);
                            }
                        }
                    }
                }

                .sets-container {
                    display: flex;
                    flex-direction: column;
                    gap: var(--size-4);
                    margin-bottom: var(--size-6);
                }

                .exercise-set {
                    display: flex;
                    flex-direction: column;
                    gap: var(--size-3);
                    padding: var(--size-4);
                    background: var(--color-surface);
                    border: 1px solid var(--color-border);
                    border-radius: var(--radius-3);
                    transition: all 0.2s ease;
                    position: relative;

                    &.completed {
                        background: var(--color-surface-completed);
                        border-color: var(--color-success);

                        &::before {
                            content: "✓";
                            position: absolute;
                            top: var(--size-2);
                            right: var(--size-2);
                            color: var(--color-success);
                            font-weight: var(--font-weight-7);
                        }
                    }

                    &.active {
                        background: var(--color-surface-active);
                        border-color: var(--color-info);
                        box-shadow: 0 0 0 2px var(--sky-1);
                    }

                    .set-info {
                        display: flex;
                        align-items: center;
                        gap: var(--size-3);
                        margin-bottom: var(--size-2);

                        .weight {
                            font-weight: var(--font-weight-6);
                            color: var(--color-text-primary);
                            font-size: var(--font-size-2);
                        }

                        .reps {
                            color: var(--color-text-secondary);
                            font-size: var(--font-size-1);
                        }

                        .edit-button {
                            margin-left: auto;
                            padding: var(--size-1) var(--size-2);
                            background: var(--color-surface-elevated);
                            border: 1px solid var(--color-border);
                            border-radius: var(--radius-2);
                            font-size: var(--font-size-0);
                            cursor: pointer;
                            text-decoration: none;
                            color: var(--color-text-secondary);
                            transition: all 0.2s ease;

                            &:hover {
                                background: var(--gray-1);
                                border-color: var(--gray-4);
                            }
                        }
                    }

                    .set-form {
                        display: flex;
                        gap: var(--size-3);
                        align-items: end;

                        .form-inputs {
                            display: flex;
                            gap: var(--size-3);
                            flex: 1;
                        }

                        .input-field {
                            display: flex;
                            flex-direction: column;
                            gap: var(--size-1);

                            label {
                                font-size: var(--font-size-0);
                                color: var(--color-text-secondary);
                                font-weight: var(--font-weight-5);
                            }

                            input {
                                width: 5rem;
                                padding: var(--size-2) var(--size-3);
                                border: 2px solid var(--color-border);
                                border-radius: var(--radius-2);
                                text-align: center;
                                font-size: var(--font-size-1);
                                font-weight: var(--font-weight-5);
                                transition: border-color 0.2s ease, box-shadow 0.2s ease;

                                &:focus {
                                    outline: none;
                                    border-color: var(--color-border-focus);
                                    box-shadow: 0 0 0 3px var(--sky-1);
                                }

                                &:invalid {
                                    border-color: var(--red-5);
                                }
                            }
                        }

                        .submit-button {
                            padding: var(--size-3) var(--size-5);
                            background: var(--color-success);
                            color: var(--white);
                            border: none;
                            border-radius: var(--radius-2);
                            font-weight: var(--font-weight-6);
                            cursor: pointer;
                            transition: background-color 0.2s ease, transform 0.1s ease;

                            &:hover {
                                background: var(--lime-7);
                                transform: translateY(-1px);
                            }

                            &:active {
                                transform: translateY(0);
                            }
                        }
                    }
                }

                .remaining-sets {
                    .section-title {
                        font-size: var(--font-size-2);
                        color: var(--color-text-secondary);
                        margin-bottom: var(--size-3);
                        font-weight: var(--font-weight-5);
                    }

                    .remaining-set {
                        color: var(--color-text-muted);
                        display: flex;
                        gap: var(--size-3);
                        padding: var(--size-2) var(--size-3);
                        background: var(--gray-0);
                        border-radius: var(--radius-2);
                        margin-bottom: var(--size-2);
                        
                        .weight {
                            font-weight: var(--font-weight-5);
                        }
                    }
                }
            }
        </style>

        <script {{ nonce }}>
          document.addEventListener("DOMContentLoaded", function () {
            const form = document.getElementById(`form-{{ $.EditingIndex }}`);
            if (form) {
              const repsInput = form.querySelector('.reps-input');
              if (repsInput) {
                // Enable the reps input
                repsInput.disabled = false;

                // Focus and select the text
                setTimeout(() => {
                  repsInput.focus();
                  repsInput.select();
                }, 100);
              }
            }

            // Initialize timer
            initializeTimer();
          });

          function initializeTimer() {
            const timerDisplay = document.getElementById('workout-timer');
            const startTime = Date.now();

            function updateTimer() {
              const elapsed = Date.now() - startTime;
              const seconds = Math.floor(elapsed / 1000);
              const minutes = Math.floor(seconds / 60);
              const hours = Math.floor(minutes / 60);

              const displaySeconds = seconds % 60;
              const displayMinutes = minutes % 60;

              let timeString = '';
              if (hours > 0) {
                timeString = `${hours}:${displayMinutes.toString().padStart(2, '0')}:${displaySeconds.toString().padStart(2, '0')}`;
              } else {
                timeString = `${displayMinutes}:${displaySeconds.toString().padStart(2, '0')}`;
              }

              timerDisplay.textContent = timeString;
            }

            // Update timer immediately
            updateTimer();

            // Update timer every second
            setInterval(updateTimer, 1000);
          }
        </script>

        <header class="exercise-header">
            <div class="header-row">
                <a href="/workouts/{{ .Date.Format "2006-01-02" }}" data-back-button class="back-link" aria-label="Back to workout">
                    ← Back
                </a>
            </div>
            <div class="header-row title-row">
                <h1 class="exercise-title">{{ .ExerciseSet.Exercise.Name }}</h1>
            </div>
            <div class="header-row actions-row">
                <div class="timer" id="workout-timer" aria-live="polite" aria-label="Workout timer">0:00</div>
                <div>
                    <a href="/workouts/{{ .Date.Format "2006-01-02" }}/exercises/{{ .ExerciseSet.Exercise.ID }}/info"
                       class="action-button info-button" aria-label="View exercise information">Info</a>
                    <a href="/workouts/{{ .Date.Format "2006-01-02" }}/exercises/{{ .ExerciseSet.Exercise.ID }}/swap"
                       class="action-button swap-button" aria-label="Swap exercise">Swap</a>
                </div>
            </div>
        </header>

        <div class="sets-container" aria-label="Exercise sets">

            {{ range $index, $set := .ExerciseSet.Sets }}
                <div class="exercise-set{{ if $set.CompletedReps }} completed{{ end }}{{ if or (and (not $set.CompletedReps) (eq $.FirstIncompleteIndex $index)) (and $.IsEditing (eq $index $.EditingIndex)) }} active{{ end }}" 
                     role="group" 
                     aria-label="Set {{ $index }}{{ if $set.CompletedReps }} completed{{ end }}">
                    <div class="set-info">
                        {{ if eq $.ExerciseSet.Exercise.ExerciseType "weighted" }}
                            <span class="weight" aria-label="Weight">{{ if $set.WeightKg }}{{ $set.WeightKg }}{{ else }}0{{ end }} kg</span>
                        {{ end }}
                        {{ if $set.CompletedReps }}
                            <span class="reps" aria-label="Completed reps">{{ $set.CompletedReps }} reps</span>
                            <a href="?edit={{ $index }}" class="edit-button" aria-label="Edit set {{ $index }}">Edit</a>
                        {{ else }}
                            <span class="reps" aria-label="Target reps">{{ $set.MinReps }}-{{ $set.MaxReps }} reps</span>
                        {{ end }}
                    </div>

                    {{ if or (and (not $set.CompletedReps) (eq $.FirstIncompleteIndex $index)) (and $.IsEditing (eq $index $.EditingIndex)) }}
                        <form method="post"
                              action="/workouts/{{ $.Date.Format "2006-01-02" }}/exercises/{{ $.ExerciseSet.Exercise.ID }}/sets/{{ $index }}/update"
                              id="form-{{ $index }}"
                              class="set-form"
                              aria-label="Complete set {{ $index }}">
                            {{ csrf }}
                            <div class="form-inputs">
                                {{ if eq $.ExerciseSet.Exercise.ExerciseType "weighted" }}
                                    <div class="input-field">
                                        <label for="weight-{{ $index }}">Weight (kg)</label>
                                        <input
                                                id="weight-{{ $index }}"
                                                inputmode="decimal"
                                                pattern="[0-9,\.]*"
                                                name="weight"
                                                value="{{ if $set.WeightKg }}{{ $set.WeightKg }}{{ else }}0{{ end }}"
                                                step="0.5"
                                                required
                                                aria-describedby="weight-help-{{ $index }}"
                                        >
                                        <div id="weight-help-{{ $index }}" class="sr-only">Enter weight in kilograms</div>
                                    </div>
                                {{ end }}
                                <div class="input-field">
                                    <label for="reps-{{ $index }}">Reps</label>
                                    <input
                                            id="reps-{{ $index }}"
                                            inputmode="numeric"
                                            pattern="[0-9]*"
                                            name="reps"
                                            placeholder="{{ $set.MinReps }}-{{ $set.MaxReps }}"
                                            {{ if $set.CompletedReps }}
                                                value="{{ $set.CompletedReps }}"
                                            {{ end }}
                                            required
                                            {{ if $set.CompletedReps }}disabled{{ end }}
                                            class="reps-input"
                                            aria-describedby="reps-help-{{ $index }}"
                                    >
                                    <div id="reps-help-{{ $index }}" class="sr-only">Enter number of repetitions completed</div>
                                </div>
                            </div>
                            <button type="submit" class="submit-button"
                                    aria-label="Complete set {{ $index }}">Done!
                            </button>
                        </form>
                    {{ end }}
                </div>
            {{ end }}
        </div>

        <div class="remaining-sets" aria-label="Remaining sets">
            <h2 class="section-title">Remaining sets</h2>
            {{ range .ExerciseSet.Sets }}
                {{ if not .CompletedReps }}
                    <div class="remaining-set" role="group" aria-label="Upcoming set">
                        {{ if eq $.ExerciseSet.Exercise.ExerciseType "weighted" }}
                            <span class="weight" aria-label="Weight">{{ if .WeightKg }}{{ .WeightKg }}{{ else }}0{{ end }} kg</span>
                        {{ end }}
                        <span class="reps" aria-label="Target reps">{{ .MinReps }}-{{ .MaxReps }} reps</span>
                    </div>
                {{ end }}
            {{ end }}
        </div>
    </main>
{{ end }}
