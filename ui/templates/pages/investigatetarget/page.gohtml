{{- /*gotype: github.com/myrjola/sheerluck/cmd/web.investigateTargetTemplateData*/ -}}

{{ define "page" }}
    <div>
        <h1>{{.Investigation.Target.Name}}</h1>
        <p>{{.Investigation.Target.Type}}</p>
        <div id="completions">
            <style {{ nonce }}>
                @scope {
                    :scope {
                        display: flex;
                        flex-direction: column;
                        gap: var(--size-4);

                        article:nth-child(odd) {
                            margin-left: var(--size-4);
                        }
                    }
                }
            </style>
            {{ range .Investigation.Completions }}
                <article>
                    <span>Detective:</span>
                    <span>{{.Question}}</span>
                </article>
                <article>
                    <span>{{$.Investigation.Target.Name}}:</span>
                    <span>{{.Answer}}</span>
                </article>
            {{ end }}
        </div>
        <template id="completion-template">
            <article>
                <span>Detective:</span>
                <span></span>
            </article>
            <article>
                <span>{{$.Investigation.Target.Name}}:</span>
                <span></span>
            </article>
        </template>
        <form method="POST">
            {{ csrf }}
            <label for="question">Detective:</label>
            <input type="text" id="question" name="question" placeholder="What happened?">
            <button type="submit">Ask</button>
            <script {{nonce}}>
              const form = me()

              form.addEventListener('submit', async function (e) {
                e.preventDefault()

                // Prevent double submission
                console.log(form.querySelector('button[type="submit"]').disabled)
                form.querySelector('button[type="submit"]').disabled = true

                // Build the completion UI.
                const template = document.getElementById('completion-template')
                const clone = template.content.cloneNode(true)
                const completions = document.getElementById('completions')
                const [question, answer] = clone.querySelectorAll('article span:nth-child(2)')
                question.textContent = form.question.value
                completions.appendChild(clone)

                // Stream the completion.
                const response = await fetch(
                  form.action,
                  {
                    method: 'POST',
                    body: new FormData(form),
                    headers: {'X-Stream': 'true'},
                  }
                )
                async function* chunkGenerator(readableStream) {
                  const decoder = new TextDecoder()
                  while (true) {
                    const { done, value } = await readableStream.read();
                    if (done) break
                    yield decoder.decode(value)
                  }
                }
                for await (let chunk of chunkGenerator(response.body.getReader())) {
                  answer.textContent += chunk
                }

                return true
              })
            </script>
        </form>
    </div>
{{ end }}
