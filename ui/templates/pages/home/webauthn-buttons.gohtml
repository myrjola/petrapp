{{ define "webauthn-buttons" }}
    <script {{ nonce }}>
      // URLBase64 to Uint8Array
      function bufferDecode(base64String) {
        const padding = "=".repeat((4 - (base64String.length % 4)) % 4);
        const base64 = (base64String + padding).replace(/-/g, "+").replace(/_/g, "/");

        const rawData = window.atob(base64);
        const outputArray = new Uint8Array(rawData.length);

        for (let i = 0; i < rawData.length; ++i) {
          outputArray[i] = rawData.charCodeAt(i);
        }

        return outputArray;
      }

      // ArrayBuffer to URLBase64
      function bufferEncode(value) {
        return btoa(String.fromCharCode.apply(null, new Uint8Array(value)))
          .replace(/\+/g, "-")
          .replace(/\//g, "_")
          .replace(/=/g, "");
      }

      function registerUser(e) {
        e.preventDefault()
        const data = new FormData(e.target)
        const headers = {'X-CSRF-Token': data.get('csrf_token')}
        const registerStartURLPath = e.target.action
        fetch(registerStartURLPath, {method: "post", headers })
          .then((resp) => resp.json())
          .then((credentialCreationOptions) => {
            credentialCreationOptions.publicKey.challenge = bufferDecode(
              credentialCreationOptions.publicKey.challenge,
            );
            credentialCreationOptions.publicKey.user.id = bufferDecode(
              credentialCreationOptions.publicKey.user.id,
            );
            if (credentialCreationOptions.publicKey.excludeCredentials) {
              for (
                var i = 0;
                i < credentialCreationOptions.publicKey.excludeCredentials.length;
                i++
              ) {
                credentialCreationOptions.publicKey.excludeCredentials[i].id =
                  bufferDecode(
                    credentialCreationOptions.publicKey.excludeCredentials[i].id,
                  );
              }
            }
            return navigator.credentials.create({
              publicKey: credentialCreationOptions.publicKey,
            });
          })
          .then((credential) => {
            let attestationObject = credential.response.attestationObject;
            let clientDataJSON = credential.response.clientDataJSON;
            let rawId = credential.rawId;

            return fetch("/api/registration/finish", {
              method: "post",
              headers,
              body: JSON.stringify({
                id: credential.id,
                rawId: bufferEncode(rawId),
                type: credential.type,
                response: {
                  attestationObject: bufferEncode(attestationObject),
                  clientDataJSON: bufferEncode(clientDataJSON),
                },
              }),
            }).then((resp) => {
              if (!resp.ok) {
                throw new Error("Finishing registration failed!");
              }
            });
          })
          .then(() => {
            window.location.reload();
          })
          .catch((error) => {
            console.log(error);
            alert("failed to register");
          });
      }

      function loginUser(e) {
        e.preventDefault()
        const data = new FormData(e.target)
        const headers = {'X-CSRF-Token': data.get('csrf_token')}
        const loginStartURLPath = e.target.action
        fetch(loginStartURLPath, {method: "post", headers })
          .then((resp) => resp.json())
          .then((credentialRequestOptions) => {
            credentialRequestOptions.publicKey.challenge = bufferDecode(
              credentialRequestOptions.publicKey.challenge,
            );
            return navigator.credentials.get({
              publicKey: credentialRequestOptions.publicKey,
            });
          })
          .then((assertion) => {
            let authData = assertion.response.authenticatorData;
            let clientDataJSON = assertion.response.clientDataJSON;
            let rawId = assertion.rawId;
            let sig = assertion.response.signature;
            let userHandle = assertion.response.userHandle;

            return fetch("/api/login/finish", {
              method: "post",
              headers,
              body: JSON.stringify({
                id: assertion.id,
                rawId: bufferEncode(rawId),
                type: assertion.type,
                response: {
                  authenticatorData: bufferEncode(authData),
                  clientDataJSON: bufferEncode(clientDataJSON),
                  signature: bufferEncode(sig),
                  userHandle: bufferEncode(userHandle),
                },
              }),
            }).then((resp) => {
              if (!resp.ok) {
                throw new Error(`failed response: ${resp.status} ${resp.statusText}`);
              }
              window.location.reload();
            });
          })
          .catch((error) => {
            console.log(error);
            alert("failed to login!");
          });
      }
    </script>
    <form method="post" action="/api/login/start">
        {{ csrf }}
        <button type="submit">Sign in</button>
        <script {{ nonce }}>
          document.currentScript.parentElement.addEventListener("submit", loginUser)
        </script>
    </form>
    <form action="/api/registration/start">
        {{ csrf }}
        <button type="submit">Register</button>
        <script {{ nonce }}>
          me().addEventListener("submit", registerUser)
        </script>
    </form>
{{ end }}

{{ define "logout-button" }}
    <form
            action="/api/logout"
            method="post"
    >
        {{ csrf }}
        <button type="submit">
            <span>Log out</span>
        </button>
    </form>
{{ end }}

